"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
exports.loadConfiguration = loadConfiguration;
exports.validateEnvironmentVariables = validateEnvironmentVariables;
exports.getRuntimeInfo = getRuntimeInfo;
exports.runLocalTest = runLocalTest;
const agent_1 = require("./agent");
const validation_1 = require("./validation");
/**
 * AWS Lambda handler for the Spend Monitor Agent
 *
 * This handler is triggered by EventBridge on a schedule and executes
 * the spend monitoring workflow with multi-channel alerting support.
 */
const handler = async (event, context) => {
    const executionId = context.awsRequestId || `local-${Date.now()}`;
    console.log(`Spend Monitor Agent execution started: ${executionId}`);
    console.log('Event:', JSON.stringify(event, null, 2));
    console.log('Context:', JSON.stringify({
        functionName: context.functionName,
        functionVersion: context.functionVersion,
        memoryLimitInMB: context.memoryLimitInMB,
        remainingTimeInMillis: context.getRemainingTimeInMillis?.()
    }, null, 2));
    const startTime = Date.now();
    try {
        // Load configuration from environment variables
        const config = loadConfiguration();
        console.log('Configuration loaded:', {
            spendThreshold: config.spendThreshold,
            region: config.region,
            checkPeriodDays: config.checkPeriodDays,
            iosEnabled: !!config.iosConfig,
            retryAttempts: config.retryAttempts
        });
        // Initialize and execute the agent
        const agent = new agent_1.SpendMonitorAgent(config);
        await agent.initialize();
        console.log('Agent initialized successfully');
        // Perform health check before execution
        const healthCheck = await agent.healthCheck();
        console.log('Health check result:', healthCheck);
        if (healthCheck.overall === 'unhealthy') {
            throw new Error(`Agent health check failed: ${healthCheck.errors.join(', ')}`);
        }
        // Execute the monitoring workflow
        await agent.execute();
        const executionTime = Date.now() - startTime;
        const agentStatus = agent.getStatus();
        console.log(`Spend monitoring completed successfully in ${executionTime}ms`);
        console.log('Agent status:', agentStatus);
        return {
            statusCode: 200,
            body: JSON.stringify({
                success: true,
                message: 'Spend monitoring completed successfully',
                executionId,
                executionTime,
                timestamp: new Date().toISOString(),
                agentStatus,
                healthCheck: healthCheck.overall
            })
        };
    }
    catch (error) {
        const executionTime = Date.now() - startTime;
        console.error(`Agent execution failed after ${executionTime}ms:`, error);
        // Log additional context for debugging
        if (error instanceof Error) {
            console.error('Error stack:', error.stack);
        }
        return {
            statusCode: 500,
            body: JSON.stringify({
                success: false,
                message: 'Spend monitoring failed',
                executionId,
                executionTime,
                error: error instanceof Error ? error.message : 'Unknown error',
                errorType: error instanceof Error ? error.constructor.name : 'UnknownError',
                timestamp: new Date().toISOString()
            })
        };
    }
};
exports.handler = handler;
/**
 * Loads configuration from environment variables with iOS support
 */
function loadConfiguration() {
    try {
        console.log('Loading configuration from environment variables...');
        // Load iOS configuration if provided
        let iosConfig;
        if (process.env.IOS_PLATFORM_APP_ARN) {
            console.log('iOS push notifications enabled - loading APNS configuration');
            iosConfig = {
                platformApplicationArn: process.env.IOS_PLATFORM_APP_ARN,
                bundleId: process.env.IOS_BUNDLE_ID || 'com.example.spendmonitor',
                sandbox: process.env.APNS_SANDBOX === 'true',
                apnsCertificatePath: process.env.APNS_CERTIFICATE_PATH,
                apnsPrivateKeyPath: process.env.APNS_PRIVATE_KEY_PATH
            };
            console.log('iOS configuration loaded:', {
                platformApplicationArn: iosConfig.platformApplicationArn,
                bundleId: iosConfig.bundleId,
                sandbox: iosConfig.sandbox,
                hasCertificatePath: !!iosConfig.apnsCertificatePath,
                hasPrivateKeyPath: !!iosConfig.apnsPrivateKeyPath
            });
        }
        // Create configuration with validation
        const config = (0, validation_1.createDefaultConfig)({
            spendThreshold: parseFloat(process.env.SPEND_THRESHOLD || '10'),
            snsTopicArn: process.env.SNS_TOPIC_ARN || '',
            checkPeriodDays: parseInt(process.env.CHECK_PERIOD_DAYS || '1'),
            region: process.env.AWS_REGION || 'us-east-1',
            retryAttempts: parseInt(process.env.RETRY_ATTEMPTS || '3'),
            minServiceCostThreshold: parseFloat(process.env.MIN_SERVICE_COST_THRESHOLD || '1'),
            iosConfig
        });
        console.log('Configuration validation completed');
        return config;
    }
    catch (error) {
        console.error('Failed to load configuration:', error);
        throw new Error(`Configuration loading failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
}
/**
 * Validates required environment variables
 */
function validateEnvironmentVariables() {
    const requiredVars = ['SNS_TOPIC_ARN'];
    const missingVars = requiredVars.filter(varName => !process.env[varName]);
    if (missingVars.length > 0) {
        throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`);
    }
    // Validate iOS-specific variables if iOS is enabled
    if (process.env.IOS_PLATFORM_APP_ARN) {
        const iosRequiredVars = ['IOS_BUNDLE_ID'];
        const missingIosVars = iosRequiredVars.filter(varName => !process.env[varName]);
        if (missingIosVars.length > 0) {
            console.warn(`Missing iOS environment variables (using defaults): ${missingIosVars.join(', ')}`);
        }
    }
}
/**
 * Gets runtime information for debugging
 */
function getRuntimeInfo() {
    return {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch,
        memoryUsage: process.memoryUsage(),
        uptime: process.uptime(),
        env: {
            AWS_REGION: process.env.AWS_REGION,
            AWS_LAMBDA_FUNCTION_NAME: process.env.AWS_LAMBDA_FUNCTION_NAME,
            AWS_LAMBDA_FUNCTION_VERSION: process.env.AWS_LAMBDA_FUNCTION_VERSION,
            AWS_LAMBDA_FUNCTION_MEMORY_SIZE: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE
        }
    };
}
/**
 * Local testing function
 */
async function runLocalTest() {
    console.log('Running local test...');
    console.log('Runtime info:', getRuntimeInfo());
    try {
        validateEnvironmentVariables();
    }
    catch (error) {
        console.warn('Environment validation warning:', error);
    }
    const mockEvent = {
        source: 'aws.events',
        'detail-type': 'Scheduled Event',
        detail: {},
        time: new Date().toISOString()
    };
    const mockContext = {
        awsRequestId: `local-test-${Date.now()}`,
        functionName: 'spend-monitor-agent-local',
        functionVersion: '$LATEST',
        memoryLimitInMB: 512,
        getRemainingTimeInMillis: () => 300000 // 5 minutes
    };
    const result = await (0, exports.handler)(mockEvent, mockContext);
    console.log('Local test result:', JSON.stringify(result, null, 2));
    return result;
}
// For local testing
if (require.main === module) {
    runLocalTest()
        .then(result => {
        console.log('Local test completed successfully');
        process.exit(result.statusCode === 200 ? 0 : 1);
    })
        .catch(error => {
        console.error('Local test failed:', error);
        process.exit(1);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBNk9FLDhDQUFpQjtBQUNqQixvRUFBNEI7QUFDNUIsd0NBQWM7QUFDZCxvQ0FBWTtBQWhQZCxtQ0FBNEM7QUFFNUMsNkNBQW1EO0FBRW5EOzs7OztHQUtHO0FBQ0ksTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQVUsRUFBRSxPQUFZLEVBQUUsRUFBRTtJQUN4RCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsWUFBWSxJQUFJLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFFbEUsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3JDLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWTtRQUNsQyxlQUFlLEVBQUUsT0FBTyxDQUFDLGVBQWU7UUFDeEMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlO1FBQ3hDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxFQUFFO0tBQzVELEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFYixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFN0IsSUFBSSxDQUFDO1FBQ0gsZ0RBQWdEO1FBQ2hELE1BQU0sTUFBTSxHQUFHLGlCQUFpQixFQUFFLENBQUM7UUFFbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRTtZQUNuQyxjQUFjLEVBQUUsTUFBTSxDQUFDLGNBQWM7WUFDckMsTUFBTSxF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QUFLLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcGVuZE1vbml0b3JBZ2VudCB9IGZyb20gJy4vYWdlbnQnO1xuaW1wb3J0IHsgU3BlbmRNb25pdG9yQ29uZmlnLCBpT1NQdXNoQ29uZmlnIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVEZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuLyoqXG4gKiBBV1MgTGFtYmRhIGhhbmRsZXIgZm9yIHRoZSBTcGVuZCBNb25pdG9yIEFnZW50XG4gKiBcbiAqIFRoaXMgaGFuZGxlciBpcyB0cmlnZ2VyZWQgYnkgRXZlbnRCcmlkZ2Ugb24gYSBzY2hlZHVsZSBhbmQgZXhlY3V0ZXNcbiAqIHRoZSBzcGVuZCBtb25pdG9yaW5nIHdvcmtmbG93IHdpdGggbXVsdGktY2hhbm5lbCBhbGVydGluZyBzdXBwb3J0LlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBjb250ZXh0OiBhbnkpID0+IHtcbiAgY29uc3QgZXhlY3V0aW9uSWQgPSBjb250ZXh0LmF3c1JlcXVlc3RJZCB8fCBgbG9jYWwtJHtEYXRlLm5vdygpfWA7XG4gIFxuICBjb25zb2xlLmxvZyhgU3BlbmQgTW9uaXRvciBBZ2VudCBleGVjdXRpb24gc3RhcnRlZDogJHtleGVjdXRpb25JZH1gKTtcbiAgY29uc29sZS5sb2coJ0V2ZW50OicsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSk7XG4gIGNvbnNvbGUubG9nKCdDb250ZXh0OicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICBmdW5jdGlvbk5hbWU6IGNvbnRleHQuZnVuY3Rpb25OYW1lLFxuICAgIGZ1bmN0aW9uVmVyc2lvbjogY29udGV4dC5mdW5jdGlvblZlcnNpb24sXG4gICAgbWVtb3J5TGltaXRJbk1COiBjb250ZXh0Lm1lbW9yeUxpbWl0SW5NQixcbiAgICByZW1haW5pbmdUaW1lSW5NaWxsaXM6IGNvbnRleHQuZ2V0UmVtYWluaW5nVGltZUluTWlsbGlzPy4oKVxuICB9LCBudWxsLCAyKSk7XG5cbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICB0cnkge1xuICAgIC8vIExvYWQgY29uZmlndXJhdGlvbiBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIGNvbnN0IGNvbmZpZyA9IGxvYWRDb25maWd1cmF0aW9uKCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ0NvbmZpZ3VyYXRpb24gbG9hZGVkOicsIHtcbiAgICAgIHNwZW5kVGhyZXNob2xkOiBjb25maWcuc3BlbmRUaHJlc2hvbGQsXG4gICAgICByZWdpb246IGNvbmZpZy5yZWdpb24sXG4gICAgICBjaGVja1BlcmlvZERheXM6IGNvbmZpZy5jaGVja1BlcmlvZERheXMsXG4gICAgICBpb3NFbmFibGVkOiAhIWNvbmZpZy5pb3NDb25maWcsXG4gICAgICByZXRyeUF0dGVtcHRzOiBjb25maWcucmV0cnlBdHRlbXB0c1xuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBhbmQgZXhlY3V0ZSB0aGUgYWdlbnRcbiAgICBjb25zdCBhZ2VudCA9IG5ldyBTcGVuZE1vbml0b3JBZ2VudChjb25maWcpO1xuICAgIGF3YWl0IGFnZW50LmluaXRpYWxpemUoKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygnQWdlbnQgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgXG4gICAgLy8gUGVyZm9ybSBoZWFsdGggY2hlY2sgYmVmb3JlIGV4ZWN1dGlvblxuICAgIGNvbnN0IGhlYWx0aENoZWNrID0gYXdhaXQgYWdlbnQuaGVhbHRoQ2hlY2soKTtcbiAgICBjb25zb2xlLmxvZygnSGVhbHRoIGNoZWNrIHJlc3VsdDonLCBoZWFsdGhDaGVjayk7XG4gICAgXG4gICAgaWYgKGhlYWx0aENoZWNrLm92ZXJhbGwgPT09ICd1bmhlYWx0aHknKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFnZW50IGhlYWx0aCBjaGVjayBmYWlsZWQ6ICR7aGVhbHRoQ2hlY2suZXJyb3JzLmpvaW4oJywgJyl9YCk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSB0aGUgbW9uaXRvcmluZyB3b3JrZmxvd1xuICAgIGF3YWl0IGFnZW50LmV4ZWN1dGUoKTtcbiAgICBcbiAgICBjb25zdCBleGVjdXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICBjb25zdCBhZ2VudFN0YXR1cyA9IGFnZW50LmdldFN0YXR1cygpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBTcGVuZCBtb25pdG9yaW5nIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgaW4gJHtleGVjdXRpb25UaW1lfW1zYCk7XG4gICAgY29uc29sZS5sb2coJ0FnZW50IHN0YXR1czonLCBhZ2VudFN0YXR1cyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnU3BlbmQgbW9uaXRvcmluZyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgZXhlY3V0aW9uSWQsXG4gICAgICAgIGV4ZWN1dGlvblRpbWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBhZ2VudFN0YXR1cyxcbiAgICAgICAgaGVhbHRoQ2hlY2s6IGhlYWx0aENoZWNrLm92ZXJhbGxcbiAgICAgIH0pXG4gICAgfTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGV4ZWN1dGlvblRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgIFxuICAgIGNvbnNvbGUuZXJyb3IoYEFnZW50IGV4ZWN1dGlvbiBmYWlsZWQgYWZ0ZXIgJHtleGVjdXRpb25UaW1lfW1zOmAsIGVycm9yKTtcbiAgICBcbiAgICAvLyBMb2cgYWRkaXRpb25hbCBjb250ZXh0IGZvciBkZWJ1Z2dpbmdcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RhY2s6JywgZXJyb3Iuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnU3BlbmQgbW9uaXRvcmluZyBmYWlsZWQnLFxuICAgICAgICBleGVjdXRpb25JZCxcbiAgICAgICAgZXhlY3V0aW9uVGltZSxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICBlcnJvclR5cGU6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5jb25zdHJ1Y3Rvci5uYW1lIDogJ1Vua25vd25FcnJvcicsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KVxuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogTG9hZHMgY29uZmlndXJhdGlvbiBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcyB3aXRoIGlPUyBzdXBwb3J0XG4gKi9cbmZ1bmN0aW9uIGxvYWRDb25maWd1cmF0aW9uKCk6IFNwZW5kTW9uaXRvckNvbmZpZyB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ0xvYWRpbmcgY29uZmlndXJhdGlvbiBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcy4uLicpO1xuXG4gICAgLy8gTG9hZCBpT1MgY29uZmlndXJhdGlvbiBpZiBwcm92aWRlZFxuICAgIGxldCBpb3NDb25maWc6IGlPU1B1c2hDb25maWcgfCB1bmRlZmluZWQ7XG4gICAgXG4gICAgaWYgKHByb2Nlc3MuZW52LklPU19QTEFURk9STV9BUFBfQVJOKSB7XG4gICAgICBjb25zb2xlLmxvZygnaU9TIHB1c2ggbm90aWZpY2F0aW9ucyBlbmFibGVkIC0gbG9hZGluZyBBUE5TIGNvbmZpZ3VyYXRpb24nKTtcbiAgICAgIFxuICAgICAgaW9zQ29uZmlnID0ge1xuICAgICAgICBwbGF0Zm9ybUFwcGxpY2F0aW9uQXJuOiBwcm9jZXNzLmVudi5JT1NfUExBVEZPUk1fQVBQX0FSTixcbiAgICAgICAgYnVuZGxlSWQ6IHByb2Nlc3MuZW52LklPU19CVU5ETEVfSUQgfHwgJ2NvbS5leGFtcGxlLnNwZW5kbW9uaXRvcicsXG4gICAgICAgIHNhbmRib3g6IHByb2Nlc3MuZW52LkFQTlNfU0FOREJPWCA9PT0gJ3RydWUnLFxuICAgICAgICBhcG5zQ2VydGlmaWNhdGVQYXRoOiBwcm9jZXNzLmVudi5BUE5TX0NFUlRJRklDQVRFX1BBVEgsXG4gICAgICAgIGFwbnNQcml2YXRlS2V5UGF0aDogcHJvY2Vzcy5lbnYuQVBOU19QUklWQVRFX0tFWV9QQVRIXG4gICAgICB9O1xuXG4gICAgICBjb25zb2xlLmxvZygnaU9TIGNvbmZpZ3VyYXRpb24gbG9hZGVkOicsIHtcbiAgICAgICAgcGxhdGZvcm1BcHBsaWNhdGlvbkFybjogaW9zQ29uZmlnLnBsYXRmb3JtQXBwbGljYXRpb25Bcm4sXG4gICAgICAgIGJ1bmRsZUlkOiBpb3NDb25maWcuYnVuZGxlSWQsXG4gICAgICAgIHNhbmRib3g6IGlvc0NvbmZpZy5zYW5kYm94LFxuICAgICAgICBoYXNDZXJ0aWZpY2F0ZVBhdGg6ICEhaW9zQ29uZmlnLmFwbnNDZXJ0aWZpY2F0ZVBhdGgsXG4gICAgICAgIGhhc1ByaXZhdGVLZXlQYXRoOiAhIWlvc0NvbmZpZy5hcG5zUHJpdmF0ZUtleVBhdGhcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBjb25maWd1cmF0aW9uIHdpdGggdmFsaWRhdGlvblxuICAgIGNvbnN0IGNvbmZpZyA9IGNyZWF0ZURlZmF1bHRDb25maWcoe1xuICAgICAgc3BlbmRUaHJlc2hvbGQ6IHBhcnNlRmxvYXQocHJvY2Vzcy5lbnYuU1BFTkRfVEhSRVNIT0xEIHx8ICcxMCcpLFxuICAgICAgc25zVG9waWNBcm46IHByb2Nlc3MuZW52LlNOU19UT1BJQ19BUk4gfHwgJycsXG4gICAgICBjaGVja1BlcmlvZERheXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LkNIRUNLX1BFUklPRF9EQVlTIHx8ICcxJyksXG4gICAgICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgJ3VzLWVhc3QtMScsXG4gICAgICByZXRyeUF0dGVtcHRzOiBwYXJzZUludChwcm9jZXNzLmVudi5SRVRSWV9BVFRFTVBUUyB8fCAnMycpLFxuICAgICAgbWluU2VydmljZUNvc3RUaHJlc2hvbGQ6IHBhcnNlRmxvYXQocHJvY2Vzcy5lbnYuTUlOX1NFUlZJQ0VfQ09TVF9USFJFU0hPTEQgfHwgJzEnKSxcbiAgICAgIGlvc0NvbmZpZ1xuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ0NvbmZpZ3VyYXRpb24gdmFsaWRhdGlvbiBjb21wbGV0ZWQnKTtcbiAgICByZXR1cm4gY29uZmlnO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgY29uZmlndXJhdGlvbjonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb25maWd1cmF0aW9uIGxvYWRpbmcgZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUVudmlyb25tZW50VmFyaWFibGVzKCk6IHZvaWQge1xuICBjb25zdCByZXF1aXJlZFZhcnMgPSBbJ1NOU19UT1BJQ19BUk4nXTtcbiAgY29uc3QgbWlzc2luZ1ZhcnMgPSByZXF1aXJlZFZhcnMuZmlsdGVyKHZhck5hbWUgPT4gIXByb2Nlc3MuZW52W3Zhck5hbWVdKTtcblxuICBpZiAobWlzc2luZ1ZhcnMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6ICR7bWlzc2luZ1ZhcnMuam9pbignLCAnKX1gKTtcbiAgfVxuXG4gIC8vIFZhbGlkYXRlIGlPUy1zcGVjaWZpYyB2YXJpYWJsZXMgaWYgaU9TIGlzIGVuYWJsZWRcbiAgaWYgKHByb2Nlc3MuZW52LklPU19QTEFURk9STV9BUFBfQVJOKSB7XG4gICAgY29uc3QgaW9zUmVxdWlyZWRWYXJzID0gWydJT1NfQlVORExFX0lEJ107XG4gICAgY29uc3QgbWlzc2luZ0lvc1ZhcnMgPSBpb3NSZXF1aXJlZFZhcnMuZmlsdGVyKHZhck5hbWUgPT4gIXByb2Nlc3MuZW52W3Zhck5hbWVdKTtcblxuICAgIGlmIChtaXNzaW5nSW9zVmFycy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oYE1pc3NpbmcgaU9TIGVudmlyb25tZW50IHZhcmlhYmxlcyAodXNpbmcgZGVmYXVsdHMpOiAke21pc3NpbmdJb3NWYXJzLmpvaW4oJywgJyl9YCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2V0cyBydW50aW1lIGluZm9ybWF0aW9uIGZvciBkZWJ1Z2dpbmdcbiAqL1xuZnVuY3Rpb24gZ2V0UnVudGltZUluZm8oKSB7XG4gIHJldHVybiB7XG4gICAgbm9kZVZlcnNpb246IHByb2Nlc3MudmVyc2lvbixcbiAgICBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybSxcbiAgICBhcmNoOiBwcm9jZXNzLmFyY2gsXG4gICAgbWVtb3J5VXNhZ2U6IHByb2Nlc3MubWVtb3J5VXNhZ2UoKSxcbiAgICB1cHRpbWU6IHByb2Nlc3MudXB0aW1lKCksXG4gICAgZW52OiB7XG4gICAgICBBV1NfUkVHSU9OOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OLFxuICAgICAgQVdTX0xBTUJEQV9GVU5DVElPTl9OQU1FOiBwcm9jZXNzLmVudi5BV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUUsXG4gICAgICBBV1NfTEFNQkRBX0ZVTkNUSU9OX1ZFUlNJT046IHByb2Nlc3MuZW52LkFXU19MQU1CREFfRlVOQ1RJT05fVkVSU0lPTixcbiAgICAgIEFXU19MQU1CREFfRlVOQ1RJT05fTUVNT1JZX1NJWkU6IHByb2Nlc3MuZW52LkFXU19MQU1CREFfRlVOQ1RJT05fTUVNT1JZX1NJWkVcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogTG9jYWwgdGVzdGluZyBmdW5jdGlvblxuICovXG5hc3luYyBmdW5jdGlvbiBydW5Mb2NhbFRlc3QoKSB7XG4gIGNvbnNvbGUubG9nKCdSdW5uaW5nIGxvY2FsIHRlc3QuLi4nKTtcbiAgY29uc29sZS5sb2coJ1J1bnRpbWUgaW5mbzonLCBnZXRSdW50aW1lSW5mbygpKTtcblxuICB0cnkge1xuICAgIHZhbGlkYXRlRW52aXJvbm1lbnRWYXJpYWJsZXMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ0Vudmlyb25tZW50IHZhbGlkYXRpb24gd2FybmluZzonLCBlcnJvcik7XG4gIH1cblxuICBjb25zdCBtb2NrRXZlbnQgPSB7XG4gICAgc291cmNlOiAnYXdzLmV2ZW50cycsXG4gICAgJ2RldGFpbC10eXBlJzogJ1NjaGVkdWxlZCBFdmVudCcsXG4gICAgZGV0YWlsOiB7fSxcbiAgICB0aW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgfTtcblxuICBjb25zdCBtb2NrQ29udGV4dCA9IHtcbiAgICBhd3NSZXF1ZXN0SWQ6IGBsb2NhbC10ZXN0LSR7RGF0ZS5ub3coKX1gLFxuICAgIGZ1bmN0aW9uTmFtZTogJ3NwZW5kLW1vbml0b3ItYWdlbnQtbG9jYWwnLFxuICAgIGZ1bmN0aW9uVmVyc2lvbjogJyRMQVRFU1QnLFxuICAgIG1lbW9yeUxpbWl0SW5NQjogNTEyLFxuICAgIGdldFJlbWFpbmluZ1RpbWVJbk1pbGxpczogKCkgPT4gMzAwMDAwIC8vIDUgbWludXRlc1xuICB9O1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIobW9ja0V2ZW50LCBtb2NrQ29udGV4dCk7XG4gIGNvbnNvbGUubG9nKCdMb2NhbCB0ZXN0IHJlc3VsdDonLCBKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpKTtcbiAgXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEZvciBsb2NhbCB0ZXN0aW5nXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgcnVuTG9jYWxUZXN0KClcbiAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0xvY2FsIHRlc3QgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgcHJvY2Vzcy5leGl0KHJlc3VsdC5zdGF0dXNDb2RlID09PSAyMDAgPyAwIDogMSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignTG9jYWwgdGVzdCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH0pO1xufVxuXG4vLyBFeHBvcnQgYWRkaXRpb25hbCBmdW5jdGlvbnMgZm9yIHRlc3RpbmdcbmV4cG9ydCB7XG4gIGxvYWRDb25maWd1cmF0aW9uLFxuICB2YWxpZGF0ZUVudmlyb25tZW50VmFyaWFibGVzLFxuICBnZXRSdW50aW1lSW5mbyxcbiAgcnVuTG9jYWxUZXN0XG59OyJdfQ==